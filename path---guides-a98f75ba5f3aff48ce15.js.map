{"version":3,"sources":["webpack:///path---guides-a98f75ba5f3aff48ce15.js","webpack:///./.cache/json/guides.json"],"names":["webpackJsonp","357","module","exports","data","allMarkdownRemark","edges","node","html","headings","depth","value","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,KAAA,muZAAyhZC,WAAoUC,MAAA,EAAAC,MAAA,oBAAsCD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,aAA+BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,gBAAkCD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,aAA+BJ,MAAQC,KAAA,22DAAw3DC,WAAmCC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,aAA+BD,MAAA,EAAAC,MAAA,aAA+BD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,gBAAkCJ,MAAQC,KAAA;AAA60yBC,WAAyvEC,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,aAA+BJ,MAAQC,KAAA,2lBAAAC,WAA6nBC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,aAA+BJ,MAAQC,KAAA,wtMAAsuMC,WAAmCC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,oBAAsCD,MAAA,EAAAC,MAAA,mBAAqCD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,wBAA0CD,MAAA,EAAAC,MAAA,4BAA8CD,MAAA,EAAAC,MAAA,kBAAoCJ,MAAQC,KAAA,8wBAAAC,WAAszBC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,aAA+BJ,MAAQC,KAAA,g7BAAw6BC,WAA8BC,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,qBAAsCC","file":"path---guides-a98f75ba5f3aff48ce15.js","sourcesContent":["webpackJsonp([126505168218822],{\n\n/***/ 357:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<h1>Shapes/Elements<a class=\\\"anchor\\\" name=\\\"elements\\\"></a></h1>\\n<p>Potion provides several shape primitives for constructing visualizations. They all render SVG by default but this can be overridden using component injection. The prop names are designed to be as similar to the API of native SVG and D3 generators.</p>\\n<h2>Arc<a class=\\\"anchor\\\" name=\\\"elements__arc\\\"></a></h2>\\n<p>Renders an arc shape using the D3 Arc generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Arc.png\\\" alt=\\\"Arc\\\" title=\\\"Arc\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Arc } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Arc\\n  innerRadius={150}\\n  outerRadius={200}\\n  startAngle={0}\\n  endAngle={Math.PI * 3 / 2}\\n  fill='black'\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>innerRadius</td>\\n<td>number</td>\\n<td></td>\\n<td>inner radius of arc</td>\\n</tr>\\n<tr>\\n<td>outerRadius</td>\\n<td>number</td>\\n<td></td>\\n<td>outer radius of arc</td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td>number</td>\\n<td></td>\\n<td>start angle of arc in radians</td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td>number</td>\\n<td></td>\\n<td>end angle of arc in radians</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td>path</td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Area<a class=\\\"anchor\\\" name=\\\"elements__area\\\"></a></h2>\\n<p>Renders an area shape using the D3 Area generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Area.png\\\" alt=\\\"Area\\\" title=\\\"Area\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Area } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Area\\n  x={d => d.x}\\n  y1={d => d.y1}\\n  y0={80}\\n  points={[\\n    { x: 10, y1: 20 },\\n    { x: 30, y1: 40 },\\n    { x: 40, y1: 30 },\\n    { x: 50, y1: 70 },\\n    { x: 70, y1: 40 },\\n    { x: 90, y1: 50 },\\n  ]}\\n  fill='black'\\n/>```\\n\\n```javascript\\n// TODO: document\\n</code></pre>\\n<h2>AreaRadial<a class=\\\"anchor\\\" name=\\\"elements__areaRadial\\\"></a></h2>\\n<p>Renders a radial area shape using the D3 Radial Area generator.</p>\\n<!-- ![AreaRadial](https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-AreaRadial.png \\\"AreaRadial\\\") -->\\n<pre><code class=\\\"language-javascript\\\">import { RadialArea } from '@potion/element';\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">// TODO: document\\n</code></pre>\\n<h2>Circle<a class=\\\"anchor\\\" name=\\\"elements__circle\\\"></a></h2>\\n<p>Renders a circle.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Circle.png\\\" alt=\\\"Circle\\\" title=\\\"Circle\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Circle } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Circle cx={100} cy={100} r={30} fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>cx</td>\\n<td>number</td>\\n<td></td>\\n<td>x position of circle center</td>\\n</tr>\\n<tr>\\n<td>cy</td>\\n<td>number</td>\\n<td></td>\\n<td>y position of circle center</td>\\n</tr>\\n<tr>\\n<td>r</td>\\n<td>number</td>\\n<td></td>\\n<td>circle radius</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'circle'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Group<a class=\\\"anchor\\\" name=\\\"elements__group\\\"></a></h2>\\n<p>Renders a symbol shape using the D3 Symbol generator.</p>\\n<pre><code class=\\\"language-javascript\\\">import { Group } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={{ translate: [100, 50], rotate: [45] }}>\\n  &#x3C;Rect width={50} height={10} />\\n&#x3C;/Group>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Line<a class=\\\"anchor\\\" name=\\\"elements__line\\\"></a></h2>\\n<p>Renders a line.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Line.png\\\" alt=\\\"Line\\\" title=\\\"Line\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Line } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Line x1={50} y1={50} x2={150} y2={150} stroke='black' strokeWidth={2} />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x1</td>\\n<td>number</td>\\n<td></td>\\n<td>starting x coordinate of line</td>\\n</tr>\\n<tr>\\n<td>y1</td>\\n<td>number</td>\\n<td></td>\\n<td>starting y coordinate of line</td>\\n</tr>\\n<tr>\\n<td>x2</td>\\n<td>number</td>\\n<td></td>\\n<td>ending x coordinate of line</td>\\n</tr>\\n<tr>\\n<td>y2</td>\\n<td>number</td>\\n<td></td>\\n<td>ending y coordinate of line</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'line'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>LineRadial<a class=\\\"anchor\\\" name=\\\"elements__lineRadial\\\"></a></h2>\\n<p>Renders a radial line using the D3 radial line generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-LineRadial.png\\\" alt=\\\"LineRadial\\\" title=\\\"LineRadial\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { LineRadial } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;LineRadial\\n  radius={50}\\n  angle={({ angle }) => angle}\\n  fill=\\\"none\\\"\\n  stroke='black'\\n  points={[\\n    { angle: 0 },\\n    { angle: Math.PI * 0.25 },\\n    { angle: Math.PI * 0.5 },\\n    { angle: Math.PI * 0.75 },\\n    { angle: Math.PI },\\n    { angle: Math.PI * 1.25 },\\n    { angle: Math.PI * 1.5 },\\n    { angle: Math.PI * 1.75 },\\n    { angle: Math.PI * 2 },\\n  ]}\\n  strokeWidth={4}\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>points</td>\\n<td>array</td>\\n<td></td>\\n<td>array of points</td>\\n</tr>\\n<tr>\\n<td>angle</td>\\n<td>number/func</td>\\n<td><code>(point) => point[0]</code></td>\\n<td>either a number setting the angle for each point or an accessor function to get the angle from each point</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td>number/func</td>\\n<td><code>(point) => point[1]</code></td>\\n<td>either a number setting the radius for each point or an accessor function to get the radius from each point</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Polyline<a class=\\\"anchor\\\" name=\\\"elements__polyline\\\"></a></h2>\\n<p>Renders an polyline shape using the D3 line generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Polyline.png\\\" alt=\\\"Polyline\\\" title=\\\"Polyline\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Polyline } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Polyline\\n  x={d => d.x}\\n  y={d => d.y}\\n  points={[\\n    { x: 5 * 10, y: 5 * 50 },\\n    { x: 5 * 30, y: 5 * 40 },\\n    { x: 5 * 40, y: 5 * 70 },\\n    { x: 5 * 50, y: 5 * 30 },\\n    { x: 5 * 70, y: 5 * 40 },\\n    { x: 5 * 90, y: 5 * 20 },\\n  ]}\\n  fill='none'\\n  stroke='black'\\n  strokeWidth={4}\\n  transform={{ rotate: [180, 250, 250] }}\\n/>```\\n\\n```javascript\\n// TODO: document\\n</code></pre>\\n<h2>Rect<a class=\\\"anchor\\\" name=\\\"elements__rect\\\"></a></h2>\\n<p>Renders a rectangle.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Rect.png\\\" alt=\\\"Rect\\\" title=\\\"Rect\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Rect } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Rect x={100} y={100} width={200} height={300} fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>number</td>\\n<td></td>\\n<td>x position of rectangle</td>\\n</tr>\\n<tr>\\n<td>cy</td>\\n<td>number</td>\\n<td></td>\\n<td>y position of rectangle</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>number</td>\\n<td></td>\\n<td>rectangle width</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>number</td>\\n<td></td>\\n<td>rectangle height</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'rect'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Ribbon<a class=\\\"anchor\\\" name=\\\"elements__ribbon\\\"></a></h2>\\n<p>Renders a ribbon using the D3 Ribbon generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Ribbon.png\\\" alt=\\\"Ribbon\\\" title=\\\"Ribbon\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Ribbon } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Ribbon\\n  source={{\\n    startAngle: 0.7524114,\\n    endAngle: 1.1212972,\\n    radius: 200,\\n  }}\\n  target={{\\n    startAngle: 1.8617078,\\n    endAngle: 1.9842927,\\n    radius: 200,\\n  }}\\n  fill=\\\"black\\\"\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>source</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>target</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Svg<a class=\\\"anchor\\\" name=\\\"elements__svg\\\"></a></h2>\\n<p>Renders an Svg element.</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;circle r='100' cx='200' cy='200' />\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'svg'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>SymbolShape<a class=\\\"anchor\\\" name=\\\"elements__symbolShape\\\"></a></h2>\\n<p>Renders a symbol shape using the D3 symbol generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-SymbolShape.png\\\" alt=\\\"SymbolShape\\\" title=\\\"SymbolShape\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { SymbolShape } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;SymbolShape size={500} type='symbolCross' fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>size</td>\\n<td>number</td>\\n<td></td>\\n<td>area of SymbolShape shape</td>\\n</tr>\\n<tr>\\n<td>type</td>\\n<td>string</td>\\n<td></td>\\n<td>name of D3 SymbolShape generator function. Possible values: \\n<code>symbolCircle</code>\\n, \\n<code>symbolCross</code>\\n, \\n<code>symbolDiamond</code>\\n, \\n<code>symbolSquare</code>\\n, \\n<code>symbolStar</code>\\n, \\n<code>symbolTriangle</code>\\n, \\n<code>symbolWye</code></td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Text<a class=\\\"anchor\\\" name=\\\"elements__text\\\"></a></h2>\\n<p>Renders text.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Text.png\\\" alt=\\\"Text\\\" title=\\\"Text\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Text } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Text dx={100} stroke='black'>Lorem ipsum&#x3C;/Text>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'text'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\",\"headings\":[{\"depth\":1,\"value\":\"Shapes/Elements\"},{\"depth\":2,\"value\":\"Arc\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Area\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":2,\"value\":\"AreaRadial\"},{\"depth\":2,\"value\":\"Circle\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Group\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Line\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"LineRadial\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Polyline\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":2,\"value\":\"Rect\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Ribbon\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Svg\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"SymbolShape\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Text\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"}]}},{\"node\":{\"html\":\"<h1>Extras<a class=\\\"anchor\\\" name=\\\"extras\\\"></a></h1>\\n<p>Extra elements/effects used when visualizing data like gradients, patterns, axes and legends to name a few.</p>\\n<h2>Patterns<a class=\\\"anchor\\\" name=\\\"extras__patterns\\\"></a></h2>\\n<p>Potion provides the ability to fill shapes with patterns using the third-party library <a href=\\\"https://github.com/finnfiddle/react-svg-textures\\\">react-svg-textures</a>.</p>\\n<p><strong>Note:</strong> <a href=\\\"https://github.com/react-native-community/react-native-svg/issues/194\\\">not supported</a> on React Native.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Extra-Pattern.png\\\" alt=\\\"Pattern\\\" title=\\\"Pattern\\\"></p>\\n<h3>Example:</h3>\\n<pre><code class=\\\"language-javascript\\\">import { Svg } from '@potion/element';\\nimport { Pattern } from '@potion/extra';\\n\\n&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pattern.Paths\\n    id='my-pattern'\\n    d='waves'\\n    stroke='black'\\n  />\\n  &#x3C;circle cx={100} cy={100} r={5} fill='url(#my-pattern)' />\\n&#x3C;/Svg>\\n</code></pre>\\n<h2>Gradients<a class=\\\"anchor\\\" name=\\\"extras__gradients\\\"></a></h2>\\n<p>Potion provides the ability to fill shapes with linear and radial gradients. Many preset gradients are provided by <a href=\\\"https://uigradients.com\\\">uiGradients</a>.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Extra-LinearGradient.png\\\" alt=\\\"LinearGradient\\\" title=\\\"LinearGradient\\\"></p>\\n<h3>Example:</h3>\\n<pre><code class=\\\"language-javascript\\\">import { Svg, Circle } from '@potion/element';\\nimport { LinearGradient } from '@potion/extra';\\n\\n&#x3C;Svg width={400} height={400}>\\n   &#x3C;LinearGradient\\n    id=\\\"my-gradient\\\"\\n    x1=\\\"0%\\\"\\n    y1=\\\"0%\\\"\\n    x2=\\\"0%\\\"\\n    y2=\\\"100%\\\"\\n    name=\\\"argon\\\"\\n  />\\n  &#x3C;Circle cx={100} cy={100} r={5} fill='url(#my-gradient)' />\\n&#x3C;/Svg>\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Extras\"},{\"depth\":2,\"value\":\"Patterns\"},{\"depth\":3,\"value\":\"Example:\"},{\"depth\":2,\"value\":\"Gradients\"},{\"depth\":3,\"value\":\"Example:\"}]}},{\"node\":{\"html\":\"<h1>Layouts<a class=\\\"anchor\\\" name=\\\"layouts\\\"></a></h1>\\n<p>The purpose of Layouts is to combine the Shapes/Elements above with datasets and enable declarative animations.</p>\\n<p>Most Layouts add useful metadata to the input data in useful ways and pass it on to the children.</p>\\n<p>For example the Pie Layout will calculate metadata from the input dataset like start- and end angles for each arc and pass it on to the children (along with the original data) in order to draw a pie chart.</p>\\n<h2>Chord<a class=\\\"anchor\\\" name=\\\"layouts__chord\\\"></a></h2>\\n<p>Renders a D3 Chord layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Chord.png\\\" alt=\\\"Chord\\\" title=\\\"Chord\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Chord } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Chord\\n    data={[\\n      [11975, 5871, 8916, 2868],\\n      [1951, 10048, 2060, 6171],\\n      [8010, 16145, 8090, 8045],\\n      [1013, 990, 940, 6907],\\n    ]}\\n    animate\\n    nodeEnter={d => ({\\n      ...d,\\n      sourceStartAngle: d.sourceEndAngle,\\n      targetStartAngle: d.targetEndAngle,\\n    })}\\n  >{nodes => nodes.map((node, i) => (\\n    &#x3C;Ribbon\\n      {...node}\\n      fill=\\\"black\\\"\\n      stroke=\\\"black\\\"\\n      fillOpacity={0.9}\\n      radius={height * 0.4}\\n      transform={{ translate: [200, 200] }}\\n    />\\n  ))}&#x3C;/Chord>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td>'Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>source</code>\\n, \\n<code>target</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.'</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padAngle</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortGroups</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortSubgroups</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortChords</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td>animate children values on enter, update and exit</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Cluster<a class=\\\"anchor\\\" name=\\\"layouts__cluster\\\"></a></h2>\\n<p>Renders a D3 Cluster layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Cluster.png\\\" alt=\\\"Cluster\\\" title=\\\"Cluster\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Cluster } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Group transform={{ translate: [40, 80] }}>\\n    &#x3C;Cluster\\n      data={{\\n        children: [\\n          {\\n            value: 10,\\n            key: '1',\\n            children: [\\n              { value: 1, key: '1a1' },\\n              { value: 2, key: '1a2' },\\n              {\\n                value: 3,\\n                key: '1a3',\\n                children: [\\n                  { value: 0.1, key: '1b1' },\\n                  { value: 0.2, key: '1b2' },\\n                ],\\n              },\\n            ],\\n          },\\n          {\\n            value: 20,\\n            key: '2',\\n            children: [\\n              { value: 1, key: '2a1' },\\n              { value: 2, key: '2a2' },\\n              {\\n                value: 3,\\n                key: '2a3',\\n                children: [\\n                  { value: 0.1, key: '2b1' },\\n                  { value: 0.2, key: '2b2' },\\n                ],\\n              },\\n            ],\\n          },\\n        ],\\n      }}\\n      size={[240, 320]}\\n      nodeEnter={d => ({ ...d, x: 200, y: 200 })}\\n      animate\\n    >{nodes => nodes.map(({ key, x, y }) => (\\n      &#x3C;Circle\\n        key={key}\\n        cx={y}\\n        cy={x}\\n        r={10}\\n        fill=\\\"black\\\"\\n      />\\n    ))}&#x3C;/Cluster>\\n  &#x3C;/Group>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x</code>\\n, \\n<code>y</code>\\n, key\\n<code>and</code>\\ndata\\n<code>properties. The</code>\\ndata` property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>separation</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>nodeSize</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Collection<a class=\\\"anchor\\\" name=\\\"layouts__collection\\\"></a></h2>\\n<p>Generic Layout component for animating datasets.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Collection.png\\\" alt=\\\"Collection\\\" title=\\\"Collection\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Collection } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Collection\\n    data={[\\n      { x: 10, key: '1' },\\n      { x: 50, key: '2' },\\n      { x: 100, key: '3' },\\n      { x: 250, key: '4' },\\n    ]}\\n  >{nodes => nodes.map(({ key, x }) => (\\n    &#x3C;Circle key={key} r={10} cx={x} cy={200} />\\n  ))}&#x3C;/Collection>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has the same properties as the corresponding datum from the input \\n<code>data</code>\\n prop. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Grid<a class=\\\"anchor\\\" name=\\\"layouts__grid\\\"></a></h2>\\n<p>Renders a grid layout using the <code>d3-v4-grid</code> library.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Grid.png\\\" alt=\\\"Grid\\\" title=\\\"Grid\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Grid } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Grid\\n    data={[\\n      { value: 1, key: '1' },\\n      { value: 2, key: '2' },\\n      { value: 3, key: '3' },\\n      { value: 4, key: '4' },\\n      { value: 5, key: '5' },\\n      { value: 6, key: '6' },\\n      { value: 7, key: '7' },\\n      { value: 8, key: '8' },\\n      { value: 9, key: '9' },\\n      { value: 10, key: '10' },\\n    ]}\\n    bands\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, x: 200, y: 200 })}\\n    animate\\n  >{nodes => nodes.map(({ nodeWidth, nodeHeight, x, y, key, value }) => (\\n    &#x3C;Circle\\n      key={key}\\n      cx={x + nodeWidth / 2}\\n      cy={y + nodeHeight / 2}\\n      r={value}\\n      fill=\\\"black\\\"\\n    />\\n  ))\\n  }&#x3C;/Grid>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>nodeWidth</code>\\n, \\n<code>nodeHeight</code>\\n, \\n<code>x</code>\\n, \\n<code>y</code>\\n, \\n<code>value</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>bands</td>\\n<td>boolean</td>\\n<td><code>false</code></td>\\n<td>configure the grid to treat nodes as bands instead of points</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>array</td>\\n<td><code>[1, 1]</code></td>\\n<td>set overall dimensions of layout</td>\\n</tr>\\n<tr>\\n<td>nodeSize</td>\\n<td>array</td>\\n<td></td>\\n<td>sets the size of all individual nodes</td>\\n</tr>\\n<tr>\\n<td>rows</td>\\n<td>number</td>\\n<td></td>\\n<td>fixes the layout to a certain number of rows</td>\\n</tr>\\n<tr>\\n<td>cols</td>\\n<td>number</td>\\n<td></td>\\n<td>fixes the layout to a certain number of columns</td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td>array \\n[\\nx, y\\n]</td>\\n<td></td>\\n<td>sets the padding between the node bands. \\n<code>x</code>\\n and \\n<code>y</code>\\n are relative to the band width/height, similar to the padding parameter of \\n<code>d3.scale.ordinal().rangeBands()</code>\\n. If nodeSize prop is set, padding is absolute</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Pack<a class=\\\"anchor\\\" name=\\\"layouts__pack\\\"></a></h2>\\n<p>Renders a D3 Pack layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Pack.png\\\" alt=\\\"Pack\\\" title=\\\"Pack\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Pack } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pack\\n    data={{\\n      children: [\\n        { value: 1, key: '1' },\\n        { value: 2, key: '2' },\\n        { value: 3, key: '3' },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    includeRoot={false}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ x, y, r, key }) => (\\n    &#x3C;Circle\\n      key={key}\\n      cx={x}\\n      cy={y}\\n      r={r}\\n      fill=\\\"black\\\"\\n    />\\n  ))}&#x3C;/Pack>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x</code>\\n, \\n<code>y</code>\\n, \\n<code>r</code>\\n, key\\n<code>and</code>\\ndata\\n<code>properties. The</code>\\ndata` property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Partition<a class=\\\"anchor\\\" name=\\\"layouts__partition\\\"></a></h2>\\n<p>Renders a D3 Partition layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Partition.png\\\" alt=\\\"Partition\\\" title=\\\"Partition\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Partition } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Partition\\n    data={{\\n      children: [\\n        { value: 1, key: '1' },\\n        { value: 2, key: '2' },\\n        {\\n          value: 0,\\n          key: '3',\\n          children: [\\n            { value: 1, key: 'a1' },\\n            { value: 2, key: 'a2' },\\n            {\\n              value: 0,\\n              key: 'a3',\\n              children: [\\n                { value: 1, key: 'b1' },\\n                { value: 2, key: 'b2' },\\n                {\\n                  value: 3,\\n                  key: 'b3',\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ key, x0, y0, x1, y1 }) => (\\n    &#x3C;Rect\\n      key={key}\\n      x={x0}\\n      y={y0}\\n      width={x1 - x0}\\n      height={y1 - y0}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n    />\\n  ))}&#x3C;/Partition>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x0</code>\\n, \\n<code>y0</code>\\n, \\n<code>x1</code>\\n, \\n<code>y1</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>separation</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>round</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Pie<a class=\\\"anchor\\\" name=\\\"layouts__pie\\\"></a></h2>\\n<p>Renders a D3 Pie layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Pie.png\\\" alt=\\\"Pie\\\" title=\\\"Pie\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Pie } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pie\\n    data={[\\n      { id: 1, key: '1', value: 1 },\\n      { id: 2, key: '2', value: 2 },\\n      { id: 3, key: '3', value: 3 },\\n    ]}\\n    value={datum => datum.value}\\n    id={datum => datum.id}\\n    sort={(a, b) => a.id - b.id}\\n    nodeEnter={d => ({ ...d, startAngle: d.endAngle })}\\n    animate\\n  >{nodes => nodes.map(({ startAngle, endAngle, key }) => (\\n    &#x3C;Arc\\n      key={key}\\n      innerRadius={0}\\n      outerRadius={100}\\n      startAngle={startAngle}\\n      endAngle={endAngle}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n      strokeWidth={1}\\n    />\\n  ))}&#x3C;/Pie>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>startAngle</code>\\n, \\n<code>endAngle</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sort</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortValues</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Stack<a class=\\\"anchor\\\" name=\\\"layouts__stack\\\"></a></h2>\\n<p>Renders a D3 Stack layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Stack.png\\\" alt=\\\"Stack\\\" title=\\\"Stack\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Stack } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Stack\\n    data={[\\n      { a: 0.1, b: 0.1, c: 0.2, key: '1' },\\n      { a: 0.2, b: 0.1, c: 0.2, key: '2' },\\n      { a: 0.3, b: 0.1, c: 0.2, key: '3' },\\n    ]}\\n    keys={['a', 'b', 'c']}\\n    animate\\n  >{nodes => nodes.map((node, i) => (\\n    &#x3C;Group transform={{ rotate: [180, 200, 200] }} key={node.key}>\\n      &#x3C;Rect\\n        x={40}\\n        y={node[0][0] * 400}\\n        width={80}\\n        height={(node[0][1] - node[0][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n      &#x3C;Rect\\n        x={160}\\n        y={node[1][0] * 400}\\n        width={80}\\n        height={(node[1][1] - node[1][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n      &#x3C;Rect\\n        x={280}\\n        y={node[2][0] * 400}\\n        width={80}\\n        height={(node[2][1] - node[2][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n    &#x3C;/Group>\\n  ))}&#x3C;/Stack>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node is a series returned for the D3 Stack generator with additional \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>keys</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>order</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>offset</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Treemap<a class=\\\"anchor\\\" name=\\\"layouts__treemap\\\"></a></h2>\\n<p>Renders a D3 Treemap layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Treemap.png\\\" alt=\\\"Treemap\\\" title=\\\"Treemap\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Treemap } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Treemap\\n    data={{\\n      children: [\\n        { value: 10, key: '1' },\\n        { value: 20, key: '2' },\\n        {\\n          value: 30,\\n          key: '3',\\n          children: [\\n            { value: 1, key: 'a1' },\\n            { value: 2, key: 'a2' },\\n            {\\n              value: 3,\\n              key: 'a3',\\n              children: [\\n                { value: 0.1, key: 'b1' },\\n                { value: 0.2, key: 'b2' },\\n                {\\n                  value: 0.3,\\n                  key: 'b3',\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ key, x0, y0, x1, y1 }) => (\\n    &#x3C;Rect\\n      key={key}\\n      x={x0}\\n      y={y0}\\n      width={x1 - x0}\\n      height={y1 - y0}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n    />\\n  ))}&#x3C;/Treemap>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x0</code>\\n, \\n<code>y0</code>\\n, \\n<code>x1</code>\\n, \\n<code>y1</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>tile</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>round</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingInner</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingOuter</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingTop</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingRight</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingBottom</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingLeft</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\",\"headings\":[{\"depth\":1,\"value\":\"Layouts\"},{\"depth\":2,\"value\":\"Chord\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Cluster\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Collection\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Grid\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Pack\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Partition\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Pie\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Stack\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Treemap\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"}]}},{\"node\":{\"html\":\"<h1>Potion</h1>\\n<p><a href=\\\"https://badge.fury.io/js/potion\\\"><img src=\\\"https://badge.fury.io/js/potion.svg\\\" alt=\\\"npm version\\\"></a></p>\\n<p><a href=\\\"http://numberpicture.com/build\\\">http://numberpicture.com/build</a></p>\\n<p>Potion is a collection of <strong>React</strong> components for declaratively composing animated, interactive visualizations.</p>\\n<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"http://numberpicture.com/docs\\\">Documentation</a></li>\\n<li><a href=\\\"http://numberpicture.com\\\">Project Home</a></li>\\n<li><a href=\\\"https://github.com/finnfiddle/potion/issues\\\">Contributing/Issues</a></li>\\n</ul>\",\"headings\":[{\"depth\":1,\"value\":\"Potion\"},{\"depth\":2,\"value\":\"Links\"}]}},{\"node\":{\"html\":\"<h1>Guides<a class=\\\"anchor\\\" name=\\\"guides\\\"></a></h1>\\n<p>These guides cover specific goals or features you might want to implement when working with NumberPicture.</p>\\n<h2>Transforms<a class=\\\"anchor\\\" name=\\\"guides__transforms\\\"></a></h2>\\n<p>All elements can have transforms applied to them like translations, rotations, and so forth.</p>\\n<p>Every element/shape component accepts a <code>transform</code> prop which can either be an object or an array.</p>\\n<h3>Object example:</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={{\\n  translate: [10, 20],\\n  rotate: [180, 50, 50],\\n  skewX: [20],\\n  skewY: [40],\\n  matrix: [1, 2, 3, 4, 5, 6],\\n  scale: [10, 20],\\n}} />\\n</code></pre>\\n<h3>Array example:</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={[\\n  { type: 'translate': value: [10, 20] },\\n  { type: 'rotate': value: [90, 50, 50] },\\n  { type: 'skewX': value: [20] },\\n  { type: 'skewY': value: [40] },\\n  { type: 'matrix': value: [1, 2, 3, 4, 5, 6] },\\n  { type: 'scale': value: [10, 20] },\\n]} />\\n</code></pre>\\n<p>If you use the array syntax multiple transforms of the same type can be applied. Transforms are applied in the order from last to first.</p>\\n<h2>React Native<a class=\\\"anchor\\\" name=\\\"guides__react_native\\\"></a></h2>\\n<p>Potion works well with React Native with a slight bit of extra configuration. By injecting components from either <a href=\\\"https://docs.expo.io/versions/latest/sdk/svg.html\\\"><code>Expo.Svg</code></a> or <a href=\\\"https://github.com/react-native-community/react-native-svg\\\"><code>react-native-svg</code></a> we are able to render our Potion charts in mobile environments.</p>\\n<p>See a demo <a href=\\\"https://expo.io/@finnfiddle/number-picture-rn-demo\\\">here</a>.</p>\\n<p><a href=\\\"http://www.youtube.com/watch?feature=player_embedded&v=-4eXEGJyOU8\\n\\\" target=\\\"_blank\\\"><img src=\\\"http://img.youtube.com/vi/-4eXEGJyOU8/0.jpg\\\" \\nalt=\\\"Potion - React Native Demo\\\" width=\\\"240\\\" height=\\\"180\\\" border=\\\"10\\\" /></a></p>\\n<p><strong>Note:</strong> Patterns are not supported yet on React Native.</p>\\n<p>There are two options for injecting components - either we can inject all components at the root of the heirarchy into the <code>Svg</code> Potion component, or we can inject into each individual Potion component that we use.</p>\\n<h3>Injecting into the <code>Svg</code> component</h3>\\n<p>We can inject all components to be used at once into the <code>Svg</code> Potion component through the <code>components</code> prop in the following way:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg } from 'expo';\\n\\nconst {\\n  Circle,\\n  Ellipse,\\n  G,\\n  LinearGradient,\\n  RadialGradient,\\n  Line,\\n  Path,\\n  Polygon,\\n  Polyline,\\n  Rect,\\n  Symbol,\\n  Text,\\n  Use,\\n  Defs,\\n  Stop,\\n} = RNSvg;\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  components={{\\n    circle: Circle,\\n    ellipse: Ellipse,\\n    g: G,\\n    lineargradient: LinearGradient,\\n    radialgradient: RadialGradient,\\n    line: Line,\\n    path: Path,\\n    polygon: Polygon,\\n    polyline: Polyline,\\n    rect: Rect,\\n    symbol: Symbol,\\n    text: Text,\\n    use: Use,\\n    defs: Defs,\\n    stop: Stop,\\n    svg: Svg,\\n  }}\\n>\\n  &#x3C;PotionCircle cx={250} cy={250} r={100} fill=\\\"black\\\" />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<h3>Injecting per component</h3>\\n<p>Another approach is the manually inject the foreign components into each Potion component we use through its <code>component</code> prop:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n>\\n  &#x3C;PotionCircle\\n    cx={250}\\n    cy={250}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<h3>Transforms</h3>\\n<p><code>react-nativ-svg</code> doesn't completely comply to the SVG spec and handles transforms in a slightly different way. Instead of a <code>transform</code> prop on elements, <code>react-native-svg</code> uses several props instead: <code>x</code>, <code>y</code>, <code>rotation</code>, <code>scale</code>, <code>origin</code>, <code>originX</code> and <code>originY</code>.</p>\\n<p>This means that in order for Potion to be able to apply transforms correctly to rendered elements it needs to be able to know which environment it is operating in. Otherwise, we would need to apply different props manually in different environments which is not ideal. We can tell Potion the environment through the <code>env</code> prop on elements.</p>\\n<p>Currently, Potion supports two environments: <code>web</code> or <code>react-native-svg</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n>\\n  &#x3C;PotionCircle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n    transform={{ translate: [250, 250] }}\\n    env=\\\"react-native-svg\\\"\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<p>We can also set the environment on the <code>Svg</code> Potion component which will automatically set the environment for all its child Potion components through the context. The above example can be rewritten as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n  env=\\\"react-native-svg\\\"\\n>\\n  &#x3C;PotionCircle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n    transform={{ translate: [250, 250] }}\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<p>Compare the above to the approach in the web environment and you will see that the way we have applied our transforms is identical:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg, Circle } from '@potion/element';\\n\\n&#x3C;Svg\\n  height={500}\\n  width={500}\\n>\\n  &#x3C;Circle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    transform={{ translate: [250, 250] }}\\n  />\\n&#x3C;/Svg>\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Guides\"},{\"depth\":2,\"value\":\"Transforms\"},{\"depth\":3,\"value\":\"Object example:\"},{\"depth\":3,\"value\":\"Array example:\"},{\"depth\":2,\"value\":\"React Native\"},{\"depth\":3,\"value\":\"Injecting into the \"},{\"depth\":3,\"value\":\"Injecting per component\"},{\"depth\":3,\"value\":\"Transforms\"}]}},{\"node\":{\"html\":\"<h1>Potion</h1>\\n<p><a href=\\\"https://badge.fury.io/js/%40potion%2Fmain\\\"><img src=\\\"https://badge.fury.io/js/%40potion%2Fmain.svg\\\" alt=\\\"npm version\\\"></a>\\n<a href=\\\"https://lernajs.io/\\\"><img src=\\\"https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg\\\" alt=\\\"lerna\\\"></a></p>\\n<p><a href=\\\"http://numberpicture.com/build\\\">http://numberpicture.com/build</a></p>\\n<p>Potion is a collection of <strong>React</strong> components for declaratively composing animated, interactive visualizations.</p>\\n<p>(Formerly NumberPicture.js)</p>\\n<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"http://numberpicture.com/docs\\\">Documentation</a></li>\\n<li><a href=\\\"http://numberpicture.com\\\">Project Home</a></li>\\n<li><a href=\\\"https://github.com/finnfiddle/potion/issues\\\">Contributing/Issues</a></li>\\n</ul>\",\"headings\":[{\"depth\":1,\"value\":\"Potion\"},{\"depth\":2,\"value\":\"Links\"}]}},{\"node\":{\"html\":\"<h1>Installation<a class=\\\"anchor\\\" name=\\\"installation\\\"></a></h1>\\n<p>Potion provides several modules for construction visualizations: <code>@potion/element@next</code>, <code>@potion/layout@next</code>, <code>@potion/extra@next</code> and <code>@potion/util@next</code>.</p>\\n<p>This enables you to install only the modules you need. However, if you would like to install all modules you can do so by running:</p>\\n<pre><code class=\\\"language-bash\\\">npm install @potion/main@next\\n</code></pre>\\n<h1>&nbsp;</h1>\\n<h1>Hello World<a class=\\\"anchor\\\" name=\\\"helloWorld\\\"></a></h1>\\n<p>A basic example to get you up and running.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Svg, Circle } from '@potion/element';\\n\\nReactDOM.render(\\n  &#x3C;Svg width={400} height={400}>\\n    &#x3C;Circle cx={200} cy={200} r={40} fill='black' />\\n  &#x3C;/Svg>\\n, 'body');\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Installation\"},{\"depth\":1,\"value\":\"Hello World\"}]}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-a98f75ba5f3aff48ce15.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"html\":\"<h1>Shapes/Elements<a class=\\\"anchor\\\" name=\\\"elements\\\"></a></h1>\\n<p>Potion provides several shape primitives for constructing visualizations. They all render SVG by default but this can be overridden using component injection. The prop names are designed to be as similar to the API of native SVG and D3 generators.</p>\\n<h2>Arc<a class=\\\"anchor\\\" name=\\\"elements__arc\\\"></a></h2>\\n<p>Renders an arc shape using the D3 Arc generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Arc.png\\\" alt=\\\"Arc\\\" title=\\\"Arc\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Arc } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Arc\\n  innerRadius={150}\\n  outerRadius={200}\\n  startAngle={0}\\n  endAngle={Math.PI * 3 / 2}\\n  fill='black'\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>innerRadius</td>\\n<td>number</td>\\n<td></td>\\n<td>inner radius of arc</td>\\n</tr>\\n<tr>\\n<td>outerRadius</td>\\n<td>number</td>\\n<td></td>\\n<td>outer radius of arc</td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td>number</td>\\n<td></td>\\n<td>start angle of arc in radians</td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td>number</td>\\n<td></td>\\n<td>end angle of arc in radians</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td>path</td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Area<a class=\\\"anchor\\\" name=\\\"elements__area\\\"></a></h2>\\n<p>Renders an area shape using the D3 Area generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Area.png\\\" alt=\\\"Area\\\" title=\\\"Area\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Area } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Area\\n  x={d => d.x}\\n  y1={d => d.y1}\\n  y0={80}\\n  points={[\\n    { x: 10, y1: 20 },\\n    { x: 30, y1: 40 },\\n    { x: 40, y1: 30 },\\n    { x: 50, y1: 70 },\\n    { x: 70, y1: 40 },\\n    { x: 90, y1: 50 },\\n  ]}\\n  fill='black'\\n/>```\\n\\n```javascript\\n// TODO: document\\n</code></pre>\\n<h2>AreaRadial<a class=\\\"anchor\\\" name=\\\"elements__areaRadial\\\"></a></h2>\\n<p>Renders a radial area shape using the D3 Radial Area generator.</p>\\n<!-- ![AreaRadial](https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-AreaRadial.png \\\"AreaRadial\\\") -->\\n<pre><code class=\\\"language-javascript\\\">import { RadialArea } from '@potion/element';\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">// TODO: document\\n</code></pre>\\n<h2>Circle<a class=\\\"anchor\\\" name=\\\"elements__circle\\\"></a></h2>\\n<p>Renders a circle.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Circle.png\\\" alt=\\\"Circle\\\" title=\\\"Circle\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Circle } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Circle cx={100} cy={100} r={30} fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>cx</td>\\n<td>number</td>\\n<td></td>\\n<td>x position of circle center</td>\\n</tr>\\n<tr>\\n<td>cy</td>\\n<td>number</td>\\n<td></td>\\n<td>y position of circle center</td>\\n</tr>\\n<tr>\\n<td>r</td>\\n<td>number</td>\\n<td></td>\\n<td>circle radius</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'circle'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Group<a class=\\\"anchor\\\" name=\\\"elements__group\\\"></a></h2>\\n<p>Renders a symbol shape using the D3 Symbol generator.</p>\\n<pre><code class=\\\"language-javascript\\\">import { Group } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={{ translate: [100, 50], rotate: [45] }}>\\n  &#x3C;Rect width={50} height={10} />\\n&#x3C;/Group>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Line<a class=\\\"anchor\\\" name=\\\"elements__line\\\"></a></h2>\\n<p>Renders a line.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Line.png\\\" alt=\\\"Line\\\" title=\\\"Line\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Line } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Line x1={50} y1={50} x2={150} y2={150} stroke='black' strokeWidth={2} />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x1</td>\\n<td>number</td>\\n<td></td>\\n<td>starting x coordinate of line</td>\\n</tr>\\n<tr>\\n<td>y1</td>\\n<td>number</td>\\n<td></td>\\n<td>starting y coordinate of line</td>\\n</tr>\\n<tr>\\n<td>x2</td>\\n<td>number</td>\\n<td></td>\\n<td>ending x coordinate of line</td>\\n</tr>\\n<tr>\\n<td>y2</td>\\n<td>number</td>\\n<td></td>\\n<td>ending y coordinate of line</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'line'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>LineRadial<a class=\\\"anchor\\\" name=\\\"elements__lineRadial\\\"></a></h2>\\n<p>Renders a radial line using the D3 radial line generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-LineRadial.png\\\" alt=\\\"LineRadial\\\" title=\\\"LineRadial\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { LineRadial } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;LineRadial\\n  radius={50}\\n  angle={({ angle }) => angle}\\n  fill=\\\"none\\\"\\n  stroke='black'\\n  points={[\\n    { angle: 0 },\\n    { angle: Math.PI * 0.25 },\\n    { angle: Math.PI * 0.5 },\\n    { angle: Math.PI * 0.75 },\\n    { angle: Math.PI },\\n    { angle: Math.PI * 1.25 },\\n    { angle: Math.PI * 1.5 },\\n    { angle: Math.PI * 1.75 },\\n    { angle: Math.PI * 2 },\\n  ]}\\n  strokeWidth={4}\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>points</td>\\n<td>array</td>\\n<td></td>\\n<td>array of points</td>\\n</tr>\\n<tr>\\n<td>angle</td>\\n<td>number/func</td>\\n<td><code>(point) => point[0]</code></td>\\n<td>either a number setting the angle for each point or an accessor function to get the angle from each point</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td>number/func</td>\\n<td><code>(point) => point[1]</code></td>\\n<td>either a number setting the radius for each point or an accessor function to get the radius from each point</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Polyline<a class=\\\"anchor\\\" name=\\\"elements__polyline\\\"></a></h2>\\n<p>Renders an polyline shape using the D3 line generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Polyline.png\\\" alt=\\\"Polyline\\\" title=\\\"Polyline\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Polyline } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Polyline\\n  x={d => d.x}\\n  y={d => d.y}\\n  points={[\\n    { x: 5 * 10, y: 5 * 50 },\\n    { x: 5 * 30, y: 5 * 40 },\\n    { x: 5 * 40, y: 5 * 70 },\\n    { x: 5 * 50, y: 5 * 30 },\\n    { x: 5 * 70, y: 5 * 40 },\\n    { x: 5 * 90, y: 5 * 20 },\\n  ]}\\n  fill='none'\\n  stroke='black'\\n  strokeWidth={4}\\n  transform={{ rotate: [180, 250, 250] }}\\n/>```\\n\\n```javascript\\n// TODO: document\\n</code></pre>\\n<h2>Rect<a class=\\\"anchor\\\" name=\\\"elements__rect\\\"></a></h2>\\n<p>Renders a rectangle.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Rect.png\\\" alt=\\\"Rect\\\" title=\\\"Rect\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Rect } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Rect x={100} y={100} width={200} height={300} fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>x</td>\\n<td>number</td>\\n<td></td>\\n<td>x position of rectangle</td>\\n</tr>\\n<tr>\\n<td>cy</td>\\n<td>number</td>\\n<td></td>\\n<td>y position of rectangle</td>\\n</tr>\\n<tr>\\n<td>width</td>\\n<td>number</td>\\n<td></td>\\n<td>rectangle width</td>\\n</tr>\\n<tr>\\n<td>height</td>\\n<td>number</td>\\n<td></td>\\n<td>rectangle height</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'rect'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Ribbon<a class=\\\"anchor\\\" name=\\\"elements__ribbon\\\"></a></h2>\\n<p>Renders a ribbon using the D3 Ribbon generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Ribbon.png\\\" alt=\\\"Ribbon\\\" title=\\\"Ribbon\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Ribbon } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Ribbon\\n  source={{\\n    startAngle: 0.7524114,\\n    endAngle: 1.1212972,\\n    radius: 200,\\n  }}\\n  target={{\\n    startAngle: 1.8617078,\\n    endAngle: 1.9842927,\\n    radius: 200,\\n  }}\\n  fill=\\\"black\\\"\\n/>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>source</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>target</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Svg<a class=\\\"anchor\\\" name=\\\"elements__svg\\\"></a></h2>\\n<p>Renders an Svg element.</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;circle r='100' cx='200' cy='200' />\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'svg'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>SymbolShape<a class=\\\"anchor\\\" name=\\\"elements__symbolShape\\\"></a></h2>\\n<p>Renders a symbol shape using the D3 symbol generator.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-SymbolShape.png\\\" alt=\\\"SymbolShape\\\" title=\\\"SymbolShape\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { SymbolShape } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;SymbolShape size={500} type='symbolCross' fill='black' />\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>size</td>\\n<td>number</td>\\n<td></td>\\n<td>area of SymbolShape shape</td>\\n</tr>\\n<tr>\\n<td>type</td>\\n<td>string</td>\\n<td></td>\\n<td>name of D3 SymbolShape generator function. Possible values: \\n<code>symbolCircle</code>\\n, \\n<code>symbolCross</code>\\n, \\n<code>symbolDiamond</code>\\n, \\n<code>symbolSquare</code>\\n, \\n<code>symbolStar</code>\\n, \\n<code>symbolTriangle</code>\\n, \\n<code>symbolWye</code></td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'path'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Text<a class=\\\"anchor\\\" name=\\\"elements__text\\\"></a></h2>\\n<p>Renders text.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Element-Text.png\\\" alt=\\\"Text\\\" title=\\\"Text\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Text } from '@potion/element';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Text dx={100} stroke='black'>Lorem ipsum&#x3C;/Text>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'text'</code></td>\\n<td>component type that gets rendered</td>\\n</tr>\\n</tbody>\\n</table>\",\"headings\":[{\"depth\":1,\"value\":\"Shapes/Elements\"},{\"depth\":2,\"value\":\"Arc\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Area\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":2,\"value\":\"AreaRadial\"},{\"depth\":2,\"value\":\"Circle\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Group\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Line\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"LineRadial\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Polyline\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":2,\"value\":\"Rect\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Ribbon\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Svg\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"SymbolShape\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Text\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"}]}},{\"node\":{\"html\":\"<h1>Extras<a class=\\\"anchor\\\" name=\\\"extras\\\"></a></h1>\\n<p>Extra elements/effects used when visualizing data like gradients, patterns, axes and legends to name a few.</p>\\n<h2>Patterns<a class=\\\"anchor\\\" name=\\\"extras__patterns\\\"></a></h2>\\n<p>Potion provides the ability to fill shapes with patterns using the third-party library <a href=\\\"https://github.com/finnfiddle/react-svg-textures\\\">react-svg-textures</a>.</p>\\n<p><strong>Note:</strong> <a href=\\\"https://github.com/react-native-community/react-native-svg/issues/194\\\">not supported</a> on React Native.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Extra-Pattern.png\\\" alt=\\\"Pattern\\\" title=\\\"Pattern\\\"></p>\\n<h3>Example:</h3>\\n<pre><code class=\\\"language-javascript\\\">import { Svg } from '@potion/element';\\nimport { Pattern } from '@potion/extra';\\n\\n&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pattern.Paths\\n    id='my-pattern'\\n    d='waves'\\n    stroke='black'\\n  />\\n  &#x3C;circle cx={100} cy={100} r={5} fill='url(#my-pattern)' />\\n&#x3C;/Svg>\\n</code></pre>\\n<h2>Gradients<a class=\\\"anchor\\\" name=\\\"extras__gradients\\\"></a></h2>\\n<p>Potion provides the ability to fill shapes with linear and radial gradients. Many preset gradients are provided by <a href=\\\"https://uigradients.com\\\">uiGradients</a>.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Extra-LinearGradient.png\\\" alt=\\\"LinearGradient\\\" title=\\\"LinearGradient\\\"></p>\\n<h3>Example:</h3>\\n<pre><code class=\\\"language-javascript\\\">import { Svg, Circle } from '@potion/element';\\nimport { LinearGradient } from '@potion/extra';\\n\\n&#x3C;Svg width={400} height={400}>\\n   &#x3C;LinearGradient\\n    id=\\\"my-gradient\\\"\\n    x1=\\\"0%\\\"\\n    y1=\\\"0%\\\"\\n    x2=\\\"0%\\\"\\n    y2=\\\"100%\\\"\\n    name=\\\"argon\\\"\\n  />\\n  &#x3C;Circle cx={100} cy={100} r={5} fill='url(#my-gradient)' />\\n&#x3C;/Svg>\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Extras\"},{\"depth\":2,\"value\":\"Patterns\"},{\"depth\":3,\"value\":\"Example:\"},{\"depth\":2,\"value\":\"Gradients\"},{\"depth\":3,\"value\":\"Example:\"}]}},{\"node\":{\"html\":\"<h1>Layouts<a class=\\\"anchor\\\" name=\\\"layouts\\\"></a></h1>\\n<p>The purpose of Layouts is to combine the Shapes/Elements above with datasets and enable declarative animations.</p>\\n<p>Most Layouts add useful metadata to the input data in useful ways and pass it on to the children.</p>\\n<p>For example the Pie Layout will calculate metadata from the input dataset like start- and end angles for each arc and pass it on to the children (along with the original data) in order to draw a pie chart.</p>\\n<h2>Chord<a class=\\\"anchor\\\" name=\\\"layouts__chord\\\"></a></h2>\\n<p>Renders a D3 Chord layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Chord.png\\\" alt=\\\"Chord\\\" title=\\\"Chord\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Chord } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Chord\\n    data={[\\n      [11975, 5871, 8916, 2868],\\n      [1951, 10048, 2060, 6171],\\n      [8010, 16145, 8090, 8045],\\n      [1013, 990, 940, 6907],\\n    ]}\\n    animate\\n    nodeEnter={d => ({\\n      ...d,\\n      sourceStartAngle: d.sourceEndAngle,\\n      targetStartAngle: d.targetEndAngle,\\n    })}\\n  >{nodes => nodes.map((node, i) => (\\n    &#x3C;Ribbon\\n      {...node}\\n      fill=\\\"black\\\"\\n      stroke=\\\"black\\\"\\n      fillOpacity={0.9}\\n      radius={height * 0.4}\\n      transform={{ translate: [200, 200] }}\\n    />\\n  ))}&#x3C;/Chord>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td>'Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>source</code>\\n, \\n<code>target</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.'</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padAngle</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortGroups</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortSubgroups</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortChords</td>\\n<td></td>\\n<td>TODO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td>animate children values on enter, update and exit</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Cluster<a class=\\\"anchor\\\" name=\\\"layouts__cluster\\\"></a></h2>\\n<p>Renders a D3 Cluster layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Cluster.png\\\" alt=\\\"Cluster\\\" title=\\\"Cluster\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Cluster } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Group transform={{ translate: [40, 80] }}>\\n    &#x3C;Cluster\\n      data={{\\n        children: [\\n          {\\n            value: 10,\\n            key: '1',\\n            children: [\\n              { value: 1, key: '1a1' },\\n              { value: 2, key: '1a2' },\\n              {\\n                value: 3,\\n                key: '1a3',\\n                children: [\\n                  { value: 0.1, key: '1b1' },\\n                  { value: 0.2, key: '1b2' },\\n                ],\\n              },\\n            ],\\n          },\\n          {\\n            value: 20,\\n            key: '2',\\n            children: [\\n              { value: 1, key: '2a1' },\\n              { value: 2, key: '2a2' },\\n              {\\n                value: 3,\\n                key: '2a3',\\n                children: [\\n                  { value: 0.1, key: '2b1' },\\n                  { value: 0.2, key: '2b2' },\\n                ],\\n              },\\n            ],\\n          },\\n        ],\\n      }}\\n      size={[240, 320]}\\n      nodeEnter={d => ({ ...d, x: 200, y: 200 })}\\n      animate\\n    >{nodes => nodes.map(({ key, x, y }) => (\\n      &#x3C;Circle\\n        key={key}\\n        cx={y}\\n        cy={x}\\n        r={10}\\n        fill=\\\"black\\\"\\n      />\\n    ))}&#x3C;/Cluster>\\n  &#x3C;/Group>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x</code>\\n, \\n<code>y</code>\\n, key\\n<code>and</code>\\ndata\\n<code>properties. The</code>\\ndata` property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>separation</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>nodeSize</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td>TODO</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Collection<a class=\\\"anchor\\\" name=\\\"layouts__collection\\\"></a></h2>\\n<p>Generic Layout component for animating datasets.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Collection.png\\\" alt=\\\"Collection\\\" title=\\\"Collection\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Collection } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Collection\\n    data={[\\n      { x: 10, key: '1' },\\n      { x: 50, key: '2' },\\n      { x: 100, key: '3' },\\n      { x: 250, key: '4' },\\n    ]}\\n  >{nodes => nodes.map(({ key, x }) => (\\n    &#x3C;Circle key={key} r={10} cx={x} cy={200} />\\n  ))}&#x3C;/Collection>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has the same properties as the corresponding datum from the input \\n<code>data</code>\\n prop. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Grid<a class=\\\"anchor\\\" name=\\\"layouts__grid\\\"></a></h2>\\n<p>Renders a grid layout using the <code>d3-v4-grid</code> library.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Grid.png\\\" alt=\\\"Grid\\\" title=\\\"Grid\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Grid } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Grid\\n    data={[\\n      { value: 1, key: '1' },\\n      { value: 2, key: '2' },\\n      { value: 3, key: '3' },\\n      { value: 4, key: '4' },\\n      { value: 5, key: '5' },\\n      { value: 6, key: '6' },\\n      { value: 7, key: '7' },\\n      { value: 8, key: '8' },\\n      { value: 9, key: '9' },\\n      { value: 10, key: '10' },\\n    ]}\\n    bands\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, x: 200, y: 200 })}\\n    animate\\n  >{nodes => nodes.map(({ nodeWidth, nodeHeight, x, y, key, value }) => (\\n    &#x3C;Circle\\n      key={key}\\n      cx={x + nodeWidth / 2}\\n      cy={y + nodeHeight / 2}\\n      r={value}\\n      fill=\\\"black\\\"\\n    />\\n  ))\\n  }&#x3C;/Grid>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>nodeWidth</code>\\n, \\n<code>nodeHeight</code>\\n, \\n<code>x</code>\\n, \\n<code>y</code>\\n, \\n<code>value</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>bands</td>\\n<td>boolean</td>\\n<td><code>false</code></td>\\n<td>configure the grid to treat nodes as bands instead of points</td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td>array</td>\\n<td><code>[1, 1]</code></td>\\n<td>set overall dimensions of layout</td>\\n</tr>\\n<tr>\\n<td>nodeSize</td>\\n<td>array</td>\\n<td></td>\\n<td>sets the size of all individual nodes</td>\\n</tr>\\n<tr>\\n<td>rows</td>\\n<td>number</td>\\n<td></td>\\n<td>fixes the layout to a certain number of rows</td>\\n</tr>\\n<tr>\\n<td>cols</td>\\n<td>number</td>\\n<td></td>\\n<td>fixes the layout to a certain number of columns</td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td>array \\n[\\nx, y\\n]</td>\\n<td></td>\\n<td>sets the padding between the node bands. \\n<code>x</code>\\n and \\n<code>y</code>\\n are relative to the band width/height, similar to the padding parameter of \\n<code>d3.scale.ordinal().rangeBands()</code>\\n. If nodeSize prop is set, padding is absolute</td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Pack<a class=\\\"anchor\\\" name=\\\"layouts__pack\\\"></a></h2>\\n<p>Renders a D3 Pack layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Pack.png\\\" alt=\\\"Pack\\\" title=\\\"Pack\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Pack } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pack\\n    data={{\\n      children: [\\n        { value: 1, key: '1' },\\n        { value: 2, key: '2' },\\n        { value: 3, key: '3' },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    includeRoot={false}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ x, y, r, key }) => (\\n    &#x3C;Circle\\n      key={key}\\n      cx={x}\\n      cy={y}\\n      r={r}\\n      fill=\\\"black\\\"\\n    />\\n  ))}&#x3C;/Pack>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x</code>\\n, \\n<code>y</code>\\n, \\n<code>r</code>\\n, key\\n<code>and</code>\\ndata\\n<code>properties. The</code>\\ndata` property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>radius</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Partition<a class=\\\"anchor\\\" name=\\\"layouts__partition\\\"></a></h2>\\n<p>Renders a D3 Partition layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Partition.png\\\" alt=\\\"Partition\\\" title=\\\"Partition\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Partition } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Partition\\n    data={{\\n      children: [\\n        { value: 1, key: '1' },\\n        { value: 2, key: '2' },\\n        {\\n          value: 0,\\n          key: '3',\\n          children: [\\n            { value: 1, key: 'a1' },\\n            { value: 2, key: 'a2' },\\n            {\\n              value: 0,\\n              key: 'a3',\\n              children: [\\n                { value: 1, key: 'b1' },\\n                { value: 2, key: 'b2' },\\n                {\\n                  value: 3,\\n                  key: 'b3',\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ key, x0, y0, x1, y1 }) => (\\n    &#x3C;Rect\\n      key={key}\\n      x={x0}\\n      y={y0}\\n      width={x1 - x0}\\n      height={y1 - y0}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n    />\\n  ))}&#x3C;/Partition>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x0</code>\\n, \\n<code>y0</code>\\n, \\n<code>x1</code>\\n, \\n<code>y1</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>separation</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>round</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Pie<a class=\\\"anchor\\\" name=\\\"layouts__pie\\\"></a></h2>\\n<p>Renders a D3 Pie layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Pie.png\\\" alt=\\\"Pie\\\" title=\\\"Pie\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Pie } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Pie\\n    data={[\\n      { id: 1, key: '1', value: 1 },\\n      { id: 2, key: '2', value: 2 },\\n      { id: 3, key: '3', value: 3 },\\n    ]}\\n    value={datum => datum.value}\\n    id={datum => datum.id}\\n    sort={(a, b) => a.id - b.id}\\n    nodeEnter={d => ({ ...d, startAngle: d.endAngle })}\\n    animate\\n  >{nodes => nodes.map(({ startAngle, endAngle, key }) => (\\n    &#x3C;Arc\\n      key={key}\\n      innerRadius={0}\\n      outerRadius={100}\\n      startAngle={startAngle}\\n      endAngle={endAngle}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n      strokeWidth={1}\\n    />\\n  ))}&#x3C;/Pie>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>startAngle</code>\\n, \\n<code>endAngle</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sort</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sortValues</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>startAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>endAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padAngle</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>id</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Stack<a class=\\\"anchor\\\" name=\\\"layouts__stack\\\"></a></h2>\\n<p>Renders a D3 Stack layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Stack.png\\\" alt=\\\"Stack\\\" title=\\\"Stack\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Stack } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Stack\\n    data={[\\n      { a: 0.1, b: 0.1, c: 0.2, key: '1' },\\n      { a: 0.2, b: 0.1, c: 0.2, key: '2' },\\n      { a: 0.3, b: 0.1, c: 0.2, key: '3' },\\n    ]}\\n    keys={['a', 'b', 'c']}\\n    animate\\n  >{nodes => nodes.map((node, i) => (\\n    &#x3C;Group transform={{ rotate: [180, 200, 200] }} key={node.key}>\\n      &#x3C;Rect\\n        x={40}\\n        y={node[0][0] * 400}\\n        width={80}\\n        height={(node[0][1] - node[0][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n      &#x3C;Rect\\n        x={160}\\n        y={node[1][0] * 400}\\n        width={80}\\n        height={(node[1][1] - node[1][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n      &#x3C;Rect\\n        x={280}\\n        y={node[2][0] * 400}\\n        width={80}\\n        height={(node[2][1] - node[2][0]) * 400}\\n        fill=\\\"black\\\"\\n        stroke=\\\"white\\\"\\n      />\\n    &#x3C;/Group>\\n  ))}&#x3C;/Stack>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node is a series returned for the D3 Stack generator with additional \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>value</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>keys</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>order</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>offset</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>Treemap<a class=\\\"anchor\\\" name=\\\"layouts__treemap\\\"></a></h2>\\n<p>Renders a D3 Treemap layout.</p>\\n<p><img src=\\\"https://raw.githubusercontent.com/finnfiddle/potion/master/__screenshots__/Layout-Treemap.png\\\" alt=\\\"Treemap\\\" title=\\\"Treemap\\\"></p>\\n<pre><code class=\\\"language-javascript\\\">import { Treemap } from '@potion/layout';\\n</code></pre>\\n<h3>Usage</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Svg width={400} height={400}>\\n  &#x3C;Treemap\\n    data={{\\n      children: [\\n        { value: 10, key: '1' },\\n        { value: 20, key: '2' },\\n        {\\n          value: 30,\\n          key: '3',\\n          children: [\\n            { value: 1, key: 'a1' },\\n            { value: 2, key: 'a2' },\\n            {\\n              value: 3,\\n              key: 'a3',\\n              children: [\\n                { value: 0.1, key: 'b1' },\\n                { value: 0.2, key: 'b2' },\\n                {\\n                  value: 0.3,\\n                  key: 'b3',\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    sum={datum => datum.value}\\n    size={[400, 400]}\\n    nodeEnter={d => ({ ...d, r: 0 })}\\n    animate\\n  >{nodes => nodes.map(({ key, x0, y0, x1, y1 }) => (\\n    &#x3C;Rect\\n      key={key}\\n      x={x0}\\n      y={y0}\\n      width={x1 - x0}\\n      height={y1 - y0}\\n      fill=\\\"black\\\"\\n      stroke=\\\"white\\\"\\n    />\\n  ))}&#x3C;/Treemap>\\n&#x3C;/Svg>\\n</code></pre>\\n<h3>Props</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>data (required)</td>\\n<td>array of objects</td>\\n<td></td>\\n<td>data that gets optionally animated and passed on to children. Each datum must have a unique \\n<code>key</code>\\n property.</td>\\n</tr>\\n<tr>\\n<td>children (required)</td>\\n<td>func</td>\\n<td></td>\\n<td>Function as Child that recieves one param: \\n<code>nodes</code>\\n. Each node has \\n<code>x0</code>\\n, \\n<code>y0</code>\\n, \\n<code>x1</code>\\n, \\n<code>y1</code>\\n, \\n<code>key</code>\\n and \\n<code>data</code>\\n properties. The \\n<code>data</code>\\n property value resembles the original input datum. Must return a valid React node.</td>\\n</tr>\\n<tr>\\n<td>tile</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>size</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>round</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>padding</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingInner</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingOuter</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingTop</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingRight</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingBottom</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>paddingLeft</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>includeRoot</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>sum</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>animate</td>\\n<td>boolean</td>\\n<td></td>\\n<td>animate children values on enter, update and exit</td>\\n</tr>\\n<tr>\\n<td>nodeEnter</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it enters - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>nodeExit</td>\\n<td>func</td>\\n<td><code>(datum) => datum</code></td>\\n<td>accessor function for getting a datum before it exits - used for animations. TODO: document \\n<code>datum</code>\\n signature</td>\\n</tr>\\n<tr>\\n<td>component</td>\\n<td>element/string</td>\\n<td><code>'g'</code></td>\\n<td>component type that wraps children</td>\\n</tr>\\n</tbody>\\n</table>\",\"headings\":[{\"depth\":1,\"value\":\"Layouts\"},{\"depth\":2,\"value\":\"Chord\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Cluster\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Collection\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Grid\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Pack\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Partition\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Pie\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Stack\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"},{\"depth\":2,\"value\":\"Treemap\"},{\"depth\":3,\"value\":\"Usage\"},{\"depth\":3,\"value\":\"Props\"}]}},{\"node\":{\"html\":\"<h1>Potion</h1>\\n<p><a href=\\\"https://badge.fury.io/js/potion\\\"><img src=\\\"https://badge.fury.io/js/potion.svg\\\" alt=\\\"npm version\\\"></a></p>\\n<p><a href=\\\"http://numberpicture.com/build\\\">http://numberpicture.com/build</a></p>\\n<p>Potion is a collection of <strong>React</strong> components for declaratively composing animated, interactive visualizations.</p>\\n<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"http://numberpicture.com/docs\\\">Documentation</a></li>\\n<li><a href=\\\"http://numberpicture.com\\\">Project Home</a></li>\\n<li><a href=\\\"https://github.com/finnfiddle/potion/issues\\\">Contributing/Issues</a></li>\\n</ul>\",\"headings\":[{\"depth\":1,\"value\":\"Potion\"},{\"depth\":2,\"value\":\"Links\"}]}},{\"node\":{\"html\":\"<h1>Guides<a class=\\\"anchor\\\" name=\\\"guides\\\"></a></h1>\\n<p>These guides cover specific goals or features you might want to implement when working with NumberPicture.</p>\\n<h2>Transforms<a class=\\\"anchor\\\" name=\\\"guides__transforms\\\"></a></h2>\\n<p>All elements can have transforms applied to them like translations, rotations, and so forth.</p>\\n<p>Every element/shape component accepts a <code>transform</code> prop which can either be an object or an array.</p>\\n<h3>Object example:</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={{\\n  translate: [10, 20],\\n  rotate: [180, 50, 50],\\n  skewX: [20],\\n  skewY: [40],\\n  matrix: [1, 2, 3, 4, 5, 6],\\n  scale: [10, 20],\\n}} />\\n</code></pre>\\n<h3>Array example:</h3>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Group transform={[\\n  { type: 'translate': value: [10, 20] },\\n  { type: 'rotate': value: [90, 50, 50] },\\n  { type: 'skewX': value: [20] },\\n  { type: 'skewY': value: [40] },\\n  { type: 'matrix': value: [1, 2, 3, 4, 5, 6] },\\n  { type: 'scale': value: [10, 20] },\\n]} />\\n</code></pre>\\n<p>If you use the array syntax multiple transforms of the same type can be applied. Transforms are applied in the order from last to first.</p>\\n<h2>React Native<a class=\\\"anchor\\\" name=\\\"guides__react_native\\\"></a></h2>\\n<p>Potion works well with React Native with a slight bit of extra configuration. By injecting components from either <a href=\\\"https://docs.expo.io/versions/latest/sdk/svg.html\\\"><code>Expo.Svg</code></a> or <a href=\\\"https://github.com/react-native-community/react-native-svg\\\"><code>react-native-svg</code></a> we are able to render our Potion charts in mobile environments.</p>\\n<p>See a demo <a href=\\\"https://expo.io/@finnfiddle/number-picture-rn-demo\\\">here</a>.</p>\\n<p><a href=\\\"http://www.youtube.com/watch?feature=player_embedded&v=-4eXEGJyOU8\\n\\\" target=\\\"_blank\\\"><img src=\\\"http://img.youtube.com/vi/-4eXEGJyOU8/0.jpg\\\" \\nalt=\\\"Potion - React Native Demo\\\" width=\\\"240\\\" height=\\\"180\\\" border=\\\"10\\\" /></a></p>\\n<p><strong>Note:</strong> Patterns are not supported yet on React Native.</p>\\n<p>There are two options for injecting components - either we can inject all components at the root of the heirarchy into the <code>Svg</code> Potion component, or we can inject into each individual Potion component that we use.</p>\\n<h3>Injecting into the <code>Svg</code> component</h3>\\n<p>We can inject all components to be used at once into the <code>Svg</code> Potion component through the <code>components</code> prop in the following way:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg } from 'expo';\\n\\nconst {\\n  Circle,\\n  Ellipse,\\n  G,\\n  LinearGradient,\\n  RadialGradient,\\n  Line,\\n  Path,\\n  Polygon,\\n  Polyline,\\n  Rect,\\n  Symbol,\\n  Text,\\n  Use,\\n  Defs,\\n  Stop,\\n} = RNSvg;\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  components={{\\n    circle: Circle,\\n    ellipse: Ellipse,\\n    g: G,\\n    lineargradient: LinearGradient,\\n    radialgradient: RadialGradient,\\n    line: Line,\\n    path: Path,\\n    polygon: Polygon,\\n    polyline: Polyline,\\n    rect: Rect,\\n    symbol: Symbol,\\n    text: Text,\\n    use: Use,\\n    defs: Defs,\\n    stop: Stop,\\n    svg: Svg,\\n  }}\\n>\\n  &#x3C;PotionCircle cx={250} cy={250} r={100} fill=\\\"black\\\" />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<h3>Injecting per component</h3>\\n<p>Another approach is the manually inject the foreign components into each Potion component we use through its <code>component</code> prop:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n>\\n  &#x3C;PotionCircle\\n    cx={250}\\n    cy={250}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<h3>Transforms</h3>\\n<p><code>react-nativ-svg</code> doesn't completely comply to the SVG spec and handles transforms in a slightly different way. Instead of a <code>transform</code> prop on elements, <code>react-native-svg</code> uses several props instead: <code>x</code>, <code>y</code>, <code>rotation</code>, <code>scale</code>, <code>origin</code>, <code>originX</code> and <code>originY</code>.</p>\\n<p>This means that in order for Potion to be able to apply transforms correctly to rendered elements it needs to be able to know which environment it is operating in. Otherwise, we would need to apply different props manually in different environments which is not ideal. We can tell Potion the environment through the <code>env</code> prop on elements.</p>\\n<p>Currently, Potion supports two environments: <code>web</code> or <code>react-native-svg</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n>\\n  &#x3C;PotionCircle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n    transform={{ translate: [250, 250] }}\\n    env=\\\"react-native-svg\\\"\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<p>We can also set the environment on the <code>Svg</code> Potion component which will automatically set the environment for all its child Potion components through the context. The above example can be rewritten as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg as PotionSvg, Circle as PotionCircle } from '@potion/element';\\nimport { Svg as RNSvg } from 'expo';\\n\\n&#x3C;PotionSvg\\n  height={500}\\n  width={500}\\n  component={RNSvg}\\n  env=\\\"react-native-svg\\\"\\n>\\n  &#x3C;PotionCircle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    component={RNCircle}\\n    transform={{ translate: [250, 250] }}\\n  />\\n&#x3C;/PotionSvg>\\n</code></pre>\\n<p>Compare the above to the approach in the web environment and you will see that the way we have applied our transforms is identical:</p>\\n<pre><code class=\\\"language-javascript\\\">import { Svg, Circle } from '@potion/element';\\n\\n&#x3C;Svg\\n  height={500}\\n  width={500}\\n>\\n  &#x3C;Circle\\n    cx={0}\\n    cy={0}\\n    r={100}\\n    fill=\\\"black\\\"\\n    transform={{ translate: [250, 250] }}\\n  />\\n&#x3C;/Svg>\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Guides\"},{\"depth\":2,\"value\":\"Transforms\"},{\"depth\":3,\"value\":\"Object example:\"},{\"depth\":3,\"value\":\"Array example:\"},{\"depth\":2,\"value\":\"React Native\"},{\"depth\":3,\"value\":\"Injecting into the \"},{\"depth\":3,\"value\":\"Injecting per component\"},{\"depth\":3,\"value\":\"Transforms\"}]}},{\"node\":{\"html\":\"<h1>Potion</h1>\\n<p><a href=\\\"https://badge.fury.io/js/%40potion%2Fmain\\\"><img src=\\\"https://badge.fury.io/js/%40potion%2Fmain.svg\\\" alt=\\\"npm version\\\"></a>\\n<a href=\\\"https://lernajs.io/\\\"><img src=\\\"https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg\\\" alt=\\\"lerna\\\"></a></p>\\n<p><a href=\\\"http://numberpicture.com/build\\\">http://numberpicture.com/build</a></p>\\n<p>Potion is a collection of <strong>React</strong> components for declaratively composing animated, interactive visualizations.</p>\\n<p>(Formerly NumberPicture.js)</p>\\n<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"http://numberpicture.com/docs\\\">Documentation</a></li>\\n<li><a href=\\\"http://numberpicture.com\\\">Project Home</a></li>\\n<li><a href=\\\"https://github.com/finnfiddle/potion/issues\\\">Contributing/Issues</a></li>\\n</ul>\",\"headings\":[{\"depth\":1,\"value\":\"Potion\"},{\"depth\":2,\"value\":\"Links\"}]}},{\"node\":{\"html\":\"<h1>Installation<a class=\\\"anchor\\\" name=\\\"installation\\\"></a></h1>\\n<p>Potion provides several modules for construction visualizations: <code>@potion/element@next</code>, <code>@potion/layout@next</code>, <code>@potion/extra@next</code> and <code>@potion/util@next</code>.</p>\\n<p>This enables you to install only the modules you need. However, if you would like to install all modules you can do so by running:</p>\\n<pre><code class=\\\"language-bash\\\">npm install @potion/main@next\\n</code></pre>\\n<h1>&nbsp;</h1>\\n<h1>Hello World<a class=\\\"anchor\\\" name=\\\"helloWorld\\\"></a></h1>\\n<p>A basic example to get you up and running.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Svg, Circle } from '@potion/element';\\n\\nReactDOM.render(\\n  &#x3C;Svg width={400} height={400}>\\n    &#x3C;Circle cx={200} cy={200} r={40} fill='black' />\\n  &#x3C;/Svg>\\n, 'body');\\n</code></pre>\",\"headings\":[{\"depth\":1,\"value\":\"Installation\"},{\"depth\":1,\"value\":\"Hello World\"}]}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides.json\n// module id = 357\n// module chunks = 126505168218822"],"sourceRoot":""}